#lang rhombus

import:
  rhombus/meta open
  lib("racket/base.rkt") as racket
  "../lib/resources.rhm" expose: Texture def_texture
  "../game/dialog.rhm" open
  meta:
    lib("racket/syntax.rkt") as syntax
    "../lib/utils.rhm" open

export:
  dialog_character
  dialog
  

meta:
  fun texture_name(name):
    def name_stx: Syntax.make('$name')
    Syntax.make(syntax.#{format-id}(name_stx, "~a_texture", name)).relocate(name)
  foldfun dialog_character_def_textures(ls)
  | '$(id :: Identifier) : $(name :: String)':
      'def_texture $(texture_name(id)): $name'

  foldfun dialog_character_entries(ls)
  | '$(id :: Identifier) : $(name :: String)': [id,to_string(id.unwrap())]


defn.macro
| 'dialog_character $name $opt ...:
    $body
    ...':
    def character_name: match '$opt ...' | '($(name :: String))': name.unwrap() | ~else: #false
    def [def_textures,...]: dialog_character_def_textures(['$body',...])
    def [[state_id, state_id_string], ...]: dialog_character_entries(['$body',...])
    'namespace $name:
      export:
        $(texture_name(state_id)) $state_id
        ...
      def $state_id: $state_id_string
      ...
      $def_textures
      ...
     def $name: DialogCharacter(
       $character_name,
       #false,
       $(name) . default_texture,
       Map{$state_id_string: $(name) . $(texture_name(state_id)), ...}
     )'

meta:
  fun id_to_dialog_var(ref, id :: Int):
    Syntax.make(syntax.#{format-id}(Syntax.make(ref), "tmp_~a", id)).relocate(ref)

  fun to_text(msg, '$expr ...'):
    match '$expr ...' | '': msg | '$expr ...': 'fun (): to_string(racket.format($msg, $expr, ...))'

  syntax_class FmtString
  | '$(msg :: String) $fmt ...':
        field expr     = match '$fmt ...' | '': msg | '$fmt ...': 'fun (): to_string(racket.format($msg, $fmt, ...))'
        field raw_expr = match '$fmt ...' | '': msg | '$fmt ...': 'to_string(racket.format($msg, $fmt, ...))'
        field text     = match '$fmt ...' | '': msg.unwrap() | '$fmt ...': #false
  | '[$(msg :: String) $fmt ...]':
        field expr     = match '$fmt ...' | '': msg | '$fmt ...': 'fun (): to_string(racket.format($msg, $fmt, ...))'
        field raw_expr = match '$fmt ...' | '': msg | '$fmt ...': 'to_string(racket.format($msg, $fmt, ...))'
        field text     = match '$fmt ...' | '': msg.unwrap() | '$fmt ...': #false


  syntax_class BranchCase
  | '$(common :: FmtString) ($(opt :: FmtString)) $(text :: FmtString)':
        field expr:
          def common_text: common.text
          def choice_text:
            def option_text: opt.text
            if common_text && option_text
            | common_text +& option_text
            | 'fun (): $(common.raw_expr) ++ $(opt.raw_expr)'
          def output_text:
            def text_text: text.text
            if common_text && text_text
            | common_text +& text_text
            | 'fun (): $(common.raw_expr) ++ $(text.raw_expr)'
          'DialogChoice(
              $choice_text,
              #false,
              $output_text,
              #false
           )'
  | '($(opt :: FmtString)) $(text :: FmtString)':
        field expr:
          def choice_text: opt.expr
          def output_text: text.expr
          'DialogChoice(
              $choice_text,
              #false,
              $output_text,
              #false
           )'
  | '($(opt :: FmtString))':
        field expr:
          def choice_text: opt.expr
          'DialogChoice(
              $choice_text,
              #false,
              #false,
              #false
           )'
  | '$(common :: FmtString)':
        field expr:
          def common_text: common.expr
          'DialogChoice(
              $common_text,
              #false,
              #false,
              #false
           )'
          


  fun
  | split_by_or('$rest ... || $expr'):
     def choices: split_by_or('$rest ...')
     List.cons('$expr', choices)
  | split_by_or('$expr ...'):
     ['$expr ...']

  foldfun split_choices(ls) ~values (seen_first = #false)
  | '$(msg :: FmtString)':
      values(msg.expr, seen_first)
  | '1 $(msg :: FmtString)' ~acc acc:
       if seen_first
       | syntax_meta.error("Duplicate text with first priority", msg)
       | values(acc, msg.expr)

  foldfun extract_exports(ls)
  | '== $(name :: Identifier) ==': name
  | 'branch $rest ...
     | $case ...
       $branch_body
       ...
     | ...' ~acc acc:
       for values(acc=acc):
         each body: [['$branch_body', ...], ...]
         extract_exports(body, acc)
  | ~skip '~> $rest ...'
  | ~skip '$character: $expr ... || $rest ...'
  | ~skip '$character: $(msg :: FmtString)'
  | ~skip '$expr ... || $rest ...'
  | ~skip '$(msg :: FmtString)'


  foldfun build_dialog(ls, init_id, start_sym) ~values (id = init_id, snippet_name=#false, prev_nodes=[], links=[])
  | '~> END' ~acc acc:
     if snippet_name
     | syntax_meta.error("A snippet can not begin with a jump")
     | values(acc, id, #false, [], links)
  | '~> $(name :: Identifier) $rest ...' ~acc acc:
     def new_links:
       for List:
         each node_sym: prev_nodes
         Pair(node_sym, '$name $rest ...')
     if snippet_name
     | syntax_meta.error("A snippet can not begin with a jump", name)
     | values(acc, id, #false, [], new_links ++ links)
  | '== $(name :: Identifier) ==' ~acc acc:
      values(acc, id, name, prev_nodes, links)
  | '$character: $expr ... || $rest ...':
      def choices: List.reverse(split_by_or('$expr ... || $rest ...'))
      def values([choice,...], first): split_choices(choices)
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var(character,id), id + 1)
      def stx:
        'def $def_sym:
             DialogTextVariant($character, $first, [$choice, ...], #false)'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(stx, next_id, #false, [def_sym], new_links ++ links)
  | '$character: $(msg :: FmtString)':
      def text: msg.expr
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var(character,id), id + 1)
      def stx:
        'def $def_sym:
             DialogText($character, $text, #false)'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(stx, next_id, #false, [def_sym], new_links ++ links)
  | 'branch $(msg :: FmtString)
     | $(branch_case :: BranchCase)
       $branch_body
       ...
     | ...' ~acc acc:
      let values(id, case_info, case_prev_nodes, acc, links):
        for values(id=id, cases=[], prev_nodes=[], acc = acc, links = links):
          each [case, body] : [[branch_case.expr, ['$branch_body', ...]], ...]
          def case_cond_id: id_to_dialog_var('id', id)
          let stx: 'def $case_cond_id: $case'
          let values(acc,id,_,case_prev_nodes,links):
             build_dialog(body, init_id, start_sym, acc, id + 1, #false, [case_cond_id], links)
          values(id,List.cons(case_cond_id, cases), prev_nodes ++ case_prev_nodes, List.cons(stx, List.reverse(acc)), links)
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var('id',id), id + 1)
      let [case_name, ...]: List.reverse(case_info)
      let stx: 'def $def_sym: DialogTextChoice(
                  #false,
                  $(msg.expr),
                  [$case_name, ...]
                )'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(List.cons(stx, acc), next_id, #false, case_prev_nodes, new_links ++ links)
  | 'branch $(character :: Identifier): $(msg :: FmtString)
     | $(branch_case :: BranchCase)
       $branch_body
       ...
     | ...' ~acc acc:
      let values(id, case_info, case_prev_nodes, acc, links):
        for values(id=id, cases=[], prev_nodes=[], acc = acc, links = links):
          each [case, body] : [[branch_case.expr, ['$branch_body', ...]], ...]
          def case_cond_id: id_to_dialog_var('id', id)
          let stx: 'def $case_cond_id: $case'
          let values(acc,id,_,case_prev_nodes,links):
             build_dialog(body, init_id, start_sym, acc, id + 1, #false, [case_cond_id], links)
          values(id,List.cons(case_cond_id, cases), prev_nodes ++ case_prev_nodes, List.cons(stx, List.reverse(acc)), links)
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var('id',id), id + 1)
      let [case_name, ...]: List.reverse(case_info) 
      let stx: 'def $def_sym: DialogTextChoice(
                  $character,
                  $(msg.expr),
                  [$case_name, ...]
                )'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(List.cons(stx, acc), next_id, #false, case_prev_nodes, new_links ++ links)
  | 'branch
     | $(branch_case :: BranchCase)
       $branch_body
       ...
     | ...' ~acc acc:
      let values(id, case_info, case_prev_nodes, acc, links):
        for values(id=id, cases=[], prev_nodes=[], acc = acc, links = links):
          each [case, body] : [[branch_case.expr, ['$branch_body', ...]], ...]
          def case_cond_id: id_to_dialog_var('id', id)
          let stx: 'def $case_cond_id: $case'
          let values(acc,id,_,case_prev_nodes,links):
             build_dialog(body, init_id, start_sym, acc, id + 1, #false, [case_cond_id], links)
          values(id,List.cons(case_cond_id, cases), prev_nodes ++ case_prev_nodes, List.cons(stx, List.reverse(acc)), links)
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var('id',id), id + 1)
      let [case_name, ...]: List.reverse(case_info) 
      let stx: 'def $def_sym: DialogTextChoice(
                  #false,
                  #false,
                  [$case_name, ...]
                )'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(List.cons(stx, acc), next_id, #false, case_prev_nodes, new_links ++ links)
  | '$expr ... || $rest ...':
      def choices: List.reverse(split_by_or('$expr ... || $rest ...'))
      def values([choice,...], first): split_choices(choices)
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var('id',id), id + 1)
      def stx:
        'def $def_sym:
             DialogTextVariant(#false, $first, [$choice, ...], #false)'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(stx, next_id, #false, [def_sym], new_links ++ links)
  | '$(msg :: FmtString)':
      def text: msg.expr
      def values(def_sym, next_id):
         cond
         | id == 0: values(start_sym, id + 1)
         | snippet_name: values(snippet_name, id)
         | ~else: values(id_to_dialog_var(msg,id), id + 1)
      def stx:
        'def $def_sym:
             DialogText(#false, $text, #false)'
      def new_links:
        for List:
          each node_sym: prev_nodes
          Pair(node_sym, def_sym)
      values(stx, next_id, #false, [def_sym], new_links ++ links)


defn.macro
| 'dialog $(name :: Identifier):
     $body
     ...':
    def start : 'start'
    def values([defs, ...], _, _, _, [Pair(link_from, link_to), ...]): build_dialog(['$body',...], 0, start)
    def [exports, ...]: extract_exports(['$body',...])
    def result :
      'namespace $name:
          export:
            $start
            $exports
            ...
          $defs
          ...
          $(link_from) . next := $(link_to)
          ...
       namespace ~open:
         export: $name
         def tmp: $(name) . start
         def $name : tmp'
    result
