#lang rhombus

import:
  rhombus/meta open
  meta:
    lib("racket/syntax.rkt") as syntax

export:
  datatype
  enum
  rename: ematch as match
  

def adt_information: #false

meta:
  fun
  | ensure_constructor_exists(constr, no_args, '[]'):
      error("Inexhaustive match: Constructor " ++ to_string(constr) ++ " not present")
  | ensure_constructor_exists(constr, no_args, '[[~else], $rest, ...]'): #void
  | ensure_constructor_exists(constr, no_args, '[[$(oconstr :: Name) ($arg, ...)], $rest, ...]'):
      cond 
      | !syntax_meta.equal_binding(constr, oconstr):
          ensure_constructor_exists(constr, no_args, '[$rest, ...]')
      | [arg, ...].length() != no_args:
          error("Number of arguments does not match: " ++ to_string('$oconstr($arg, ...)') ++ " should have " ++ to_string(no_args) ++ " arguments")
      | ~else: #void

  | ensure_constructor_exists(constr, no_args, '[[$(oconstr :: Name)], $rest, ...]'):
      cond 
      | !syntax_meta.equal_binding(constr, oconstr):
          ensure_constructor_exists(constr, no_args, '[$rest, ...]')
      | ~else: #void


expr.macro
| 'ematch $expr_term ...
   | $case ...:
       $body
       ...
   | ...':
     def '$(expr :: expr_meta.Parsed)': '$expr_term ...'
     def data: statinfo_meta.lookup('$expr', 'adt_information')
     match data
     | #false: error("Insufficient static information on \"" ++ to_string(expr) ++ "\" in ematch")
     | '[[$scons, $scons_args], ...]':
         for:
           each [cons, cons_args]: [[scons,scons_args], ...]
           def no_args: match cons_args | '[$arg, ...]': [arg, ...].length()
           ensure_constructor_exists(
               cons, no_args,
               '[[$case ...], ...]'
           )
           
         'match $expr
          | $case ...:
             $body
             ...
          | ...'

defn.macro
| 'datatype $name
   | $constructor ($arg ..., ...)
   | ...':
   def name_stx: Syntax.make('$name')
   def super_name:
     Syntax.make(
       syntax.#{format-id}(
         name_stx,
         "~a_super",
         name
       )
     ).relocate(name)
   '«class $super_name ():
       nonfinal

       static_info:
         '((adt_information, [[$constructor, [$arg ..., ...]], ...]))'

     annot.macro '$name': '$super_name'

     class $constructor ($arg ..., ...):
       extends $super_name
     ...
    »'

meta:

    fun
    | case_to_names(name, []): []
    | case_to_names(name, [case, rest, ...]):
        def case_stx: Syntax.make('$case')
        def case_id: Syntax.make(
          syntax.#{format-id}(case_stx, "~a.~a", name.unwrap(), case.unwrap())
        ).relocate(case)
        def rest_cases: case_to_names(name, [rest, ...])
        List.cons([case, case_id], rest_cases)

    fun
    | build_enum_constructors(_, [], _): []
    | build_enum_constructors(super_name, [constructor_name, rest, ...], n):
        def stx:
          'class $constructor_name():
               extends $super_name
               override property ind :: Integral: $n'
        List.cons(stx, build_enum_constructors(super_name, [rest, ...], n + 1))

defn.macro
| 'enum $name
   | $case ...
   | ...':
    def name_stx: Syntax.make('$name')
    def super_name:
      Syntax.make(
        syntax.#{format-id}(name_stx, "~a_super", name)
      ).relocate(name)
    match case_to_names(name, ['$case ...', ...])
    | [[case, constructor_name], ...]:
        def [constr, ...]: build_enum_constructors(super_name, [constructor_name, ...], 0)
        '«namespace $name:
            export: $name $case ...

            class $super_name ():
               nonfinal
               abstract property ind :: Integral
               static_info:
                 '((adt_information, [[$case,[]], ...]))'

            annot.macro '$name': '$super_name'

            $constr
            ...

            bind.macro '$case': '$constructor_name ()'
            ...
            expr.macro '$case': '$constructor_name ()'
            ...
          annot.macro '$name': '$name . $name'
          »'

module test:
  // check that dotted names work
  namespace nested:
    export all_defined
    datatype Example
    | One(a)
    | Two(a, b)
  ematch nested.One(0)
  | nested.One(_): "one"
  | nested.Two(_, _): "two"
