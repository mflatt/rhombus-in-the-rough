#lang rhombus

import:
   rhombus/meta open
   lib("racket/main.rkt") as racket
   meta:
     lib("racket/syntax.rkt") as syntax
     "utils.rhm" open
   lib("ffi/unsafe.rkt") as unsafe

export:
  system
  component
  entity
  instance

use_static

def max_entities: 10

def mutable systems: []
def mutable components: []

namespace entity:
  export: Entity create available_entities lookup

  def mutable available_entities: racket.#{build-list}(max_entities, fun (id): id)
  def entities :: Array : racket.#{build-vector}(max_entities, fun (_): #false)

  class Entity(id::Integral, mutable destroyed :: Boolean):

    method add_component([comp :: Component,data]) :: Entity:
      comp.add_component(this, data)
      this
      
    method has_component(fn):
      def comps :: List: fn()
      def comp :: Component: comps[0]
      comp.has_data(this)

    method get_component(fn):
      def comps :: List = fn()
      def comp :: Component: comps[0]
      comp.get_data(this)

    method get_component_opt(fn):
      def comps :: List = fn()
      def comp :: Component : comps[0]
      comp.get_data_opt(this)

    method remove_component(fn):
      def comps :: List = fn()
      def comp :: Component : comps[0]
      comp.remove_component(this)

    method destroy():
      if destroyed
      | error("Attempt to destroy an invalid entity")
      | for:
          each comp :: Component : components
          comp.remove_component(this)
        for:
          each sys :: System : systems
          sys.remove_entity(this)
        entities[id] := #false
        available_entities := List.cons(id, available_entities)
        destroyed := #true

    method destroy_safe():
      if destroyed
      | #void
      | destroy()


  fun lookup(id::Integral) :: Entity:
    entities[id]

  fun create() :: Entity:
    def List.cons(id, rest) : available_entities
    available_entities := rest
    def entity: Entity(id, #false)
    entities[id] := entity
    unsafe.#{register-finalizer}(
        entity,
        fun (obj :: Entity):
          if obj.destroyed
          | #void
          | obj.destroy())
    entity

class.together:

  class System(
     name :: String,
     mutable _entities :: MutableSet,
     components :: List.of(Component)
   ):

     constructor(name :: String, components :: List.of(Component)):
       def sys: super(name, MutableSet{}, components)
       // add self to components
       for:
          each comp: components
          comp.add_system(sys)
       // add all interested entities
       for:
         each entity: components[0].entities()
         keep_when has_data(entity, components)
         sys._entities[entity] := #true
       sys

     method remove_entity(entity :: entity.Entity):
       _entities[entity] := #false

     method notify_entity(entity :: entity.Entity):
       if has_data(entity, components)
       | _entities[entity] := #true
       | _entities[entity] := #false

     method entities():
       _entities

  class Component(
    name :: String,
    entity_to_index_map :: Array,
    index_to_entity_map :: Array,
    data :: Array,
    mutable systems :: List.of(System),
    mutable next_index :: Integral
   ):

    constructor(name):
      def comp:
        super(
          name, 
          Array.make(max_entities, #false),
          Array.make(max_entities, #false),
          Array.make(max_entities, #false),
          [],
          0
        )
      components := List.cons(comp, components)
      comp

    method add_system(sys):
      systems := List.cons(sys, systems)

    method entities():
      def mutable index :: Integral = 0
      fun next():
        if index < next_index
        | def vl: index_to_entity_map[index]
          index := index + 1
          entity.lookup(vl)
        | #false
      racket.#{in-producer}(next, #false)

    method add_component(entity :: entity.Entity, value):
      if entity_to_index_map[entity.id]
      | data[entity_to_index_map[entity.id]] := value // error("attempt to add duplicate components to entity")
      | def index : next_index

        entity_to_index_map[entity.id] := index
        index_to_entity_map[index] := entity.id
        data[index] := value

        next_index := next_index + 1

        // notify relevant systems
        for:
          each sys: systems
          sys.notify_entity(entity)

    method remove_component(entity :: entity.Entity):
      if (!entity_to_index_map[entity.id])
      | #void
      | def index : entity_to_index_map[entity.id]
        for:
          each other_ind: (index + 1) .. next_index
          def entity: index_to_entity_map[other_ind]

          entity_to_index_map[entity] := other_ind - 1
          index_to_entity_map[other_ind - 1] := entity

          data[other_ind - 1] := data[other_ind]

        block:
          entity_to_index_map[entity.id] := #false
          index_to_entity_map[next_index - 1] := #false
          data[next_index - 1] := #false
        next_index := next_index - 1

        // notify relevant systems
        for:
          each sys: systems
          sys.notify_entity(entity)

    method has_data(entity :: entity.Entity):
      def index: entity_to_index_map[entity.id]
      if index
      | #true
      | #false

    method get_data(entity :: entity.Entity):
      def index: entity_to_index_map[entity.id]
      if (!index)
      | error("entity does not have component")
      | data[index]

    method get_data_opt(entity :: entity.Entity):
      def index: entity_to_index_map[entity.id]
      if (!index)
      | #false
      | data[index]


fun has_data(entity :: entity.Entity, comps :: List.of(Component)):
  def mutable all_has_data: #true
  for:
    each comp: comps
    all_has_data := comp.has_data(entity)
    break_when (!all_has_data)
    #void
  all_has_data


fun test():
  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    [Position.get_data(e1), Position.get_data(e2), Position.get_data(e3)]
    ~is ["hello","world", "!!!"]

  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.remove_component(e2)
    [Position.get_data(e1), Position.get_data(e3)]
    ~is ["hello","!!!"]

  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.remove_component(e2)
    Position.remove_component(e3)
    Position.get_data(e1)
    ~is "hello"

  check:
    def Position : Component("Position")
    def [e1,e2,e3]: [entity.Entity(0,#false),entity.Entity(1,#false),entity.Entity(2,#false)]
    Position.add_component(e1, "hello")
    Position.add_component(e2, "world")
    Position.add_component(e3, "!!!")
    Position.remove_component(e2)
    Position.remove_component(e3)
    Position.get_data(e1)
    ~is "hello"

  check:
    def _Position : Component("Position")
    fun Position(data): [_Position, data]
    def e1: entity.create()
    def e2: entity.create()
    def e3: entity.create()
    e1.add_component(Position("hello "))
    e2.add_component(Position("world"))
    e3.add_component(Position("!!!"))
    [_Position.get_data(e1), _Position.get_data(e2), _Position.get_data(e3)]
    ~is ["hello ", "world", "!!!"]
  
space.transform component:
  space_path in_the_rough/component
  bridge_definer bridge
  meta_namespace component_meta:
    reflection space

defn.macro
| 'component $(name :: Identifier)($field_name :: $ty, ...)':
    '«namespace fresh: // the name `fresh` is macro-introduced, so hidden
        export: component class
        def key = $(to_string(name)) // Symbol.gen() might be better here
        def component: Component(key)
        class class(mutable $field_name :: $ty, ...)
      annot.macro '$name': 'fresh.class'
      component.bridge $name: 'fresh.component'
      fun
      | $name($field_name :: $ty, ...) : [fresh.component, fresh.class($field_name, ...)]
      | $name(): [fresh.component]»'

expr.macro
| 'name_to_component_value($(name :: Name))':
    syntax_meta.value(name, component_meta.space)

expr.macro
| 'system_defs($name, [[$component_name, $component], ...], [$body, ...])':
    'block:
      def $component_name :: $component = ((name_to_component_value($component)).get_data($name))
      ...
      $body
      ...'

meta:

  fun build_system_definition(components, body, this):
    match body
    | 'method $fn($arg, ...) $opt ...:
         $body
         ...':
       'fun $fn($arg, ...):
         for:
           each $this :~ entity.Entity : _system._entities
           system_defs($this, $components, [$body, ...])'  
    | 'fun $fn $arg ...:
         $body
         ...':
       'fun $fn $arg ...:
           $body
           ...'  
    | 'def $fn $opt ...:
         $body
         ...':
       'def $fn $opt ...:
           $body
           ...'  

  fun build_system_body(components, body, this) :: List:
    match body
    | '[[$body]]':
       [build_system_definition(components, '$body', this)]
    | '[[$body], $rest, ...]':
       def defn: build_system_definition(components, '$body', this)
       def rest: build_system_body(components, '[$rest,...]', this)
       [defn] ++ rest

  fun
  | extract_this_parameter(''): 'entity'
  | extract_this_parameter('with $name'): '$name'

  fun extract_export(body):
    match body
    | 'fun $fn $arg ...:
         $body
         ...':
       '$fn'  
    | 'method $fn $arg ...:
         $body
         ...':
       '$fn'  
    | 'def $fn $opt ...:
         $body
         ...':
       '$fn'


  fun build_system_exports(body) :: List:
    match body
    | '[[$body], ...]': [extract_export('$body'), ...]


defn.macro
| 'system $name($component_name :: $component, ...) $rest ...:
     $body
     ...':
    def _name_value : match name | '$(x::Identifier)': to_string(x.unwrap())
    def component_list: 'component_names([$component, ...])'
    def this_value: extract_this_parameter('$rest ...')
    def system_body:
       build_system_body(
        '[[$component_name, $component], ...]',
        '[[$body], ...]',
        '$this_value'
       )
    def exports: build_system_exports('[[$body], ...]')
    match [system_body, exports]
    | [[definition, ...],[id, ...]]:
        '«namespace $name:
            export:
              _system
              entities
              $id
              ...
            def _system: System($_name_value, [name_to_component_value($component), ...])
            fun entities(): _system.entities()
            $definition
            ...
          »'
| 'system $name($component_name :: $component, ...) $rest ...':
    def _name_value : match name | '$(x::Identifier)': to_string(x.unwrap())
    def component_list: 'component_names([$component, ...])'
    def this_value: extract_this_parameter('$rest ...')
    '«namespace $name:
        export:
          _system
          entities
        def _system: System($_name_value, [name_to_component_value($component), ...])
        fun entities(): _system.entities()
      »'

fun add_component_helper(entity :: entity.Entity, comp):
  entity.add_component(comp)

meta:
  fun
  | and_all([]): '#true'
  | and_all([hd, & tl]):
      '$hd && $(and_all(tl))'
  
  foldfun instance_entity_args(ls)
  | 'component $name :: $component': '$name'
  | 'component optional $(name :: Identifier) :: $(component :: Name)':
      def kwarg: Keyword.from_symbol(name.unwrap())
      '$kwarg: $name = #false'
  | 'component $name :~ $(component :: Name) = $body ...':
      def kwarg: Keyword.from_symbol(name.unwrap())
      '$kwarg: $name = ($body ...)'
  | ~skip 'method $body ...'

  foldfun instance_component_tests(ls, entity)
  | 'component $name :: $(component :: Name)': '($(entity) :~ entity.Entity) . has_component ($component)'
  | 'component $name :~ $(component :: Name) = $body ...': '($(entity) :~ entity.Entity). has_component ($component)'
  | ~skip 'component optional $name :: $component'
  | ~skip 'method $body ...'

  foldfun instance_entity_exports(ls)
  | 'component $name :: $(component :: Name)': '$name'
  | 'component optional $name :: $(component :: Name)': '$name'
  | 'component $name :~ $(component :: Name) = $body ...': '$name'
  | 'method $name $body ...': '$name'

  foldfun instance_entity_fields(ls)
  | 'component $name :: $(component :: Name)': '$name'
  | 'component optional $name :: $(component :: Name)': '$name'
  | 'component $name :~ $(component :: Name) = $body ...': '$name'
  | ~skip 'method $body ...'


  foldfun instance_entity_helpers(ls)
  | 'component $name :: $component':
     'fun $name(entity :: entity.Entity) :: $(component :: Name): entity.get_component($component)'
  | 'component optional $name :: $(component :: Name)':
     'fun $name(entity :: entity.Entity) :: Maybe($component): entity.get_component_opt($component)'
  | 'component $name :~ $(component :: Name) = $body ...':
     'fun $name(entity :: entity.Entity) :: $component: entity.get_component($component)'
  | ~skip 'method $body ...'

  foldfun instance_entity_methods(ls, instance_name, [field,...], ths)
  | ~skip 'component $name :: $(component :: Name)'
  | ~skip 'component optional $name :: $(component :: Name)'
  | ~skip 'component $name :~ $(component :: Name) = $body ...'
  | 'method $(fn :: Identifier)($arg,...):
        $body
        ...':
      'fun $(instance_name) . $fn($ths :: $instance_name, $arg,...):
          def $field : $(ths) . $field
          ...
          $body
          ...'

  foldfun instance_entity_method_args(ls)
  | ~skip 'component $name :: $(component :: Name)'
  | ~skip 'component optional $name :: $(component :: Name)'
  | ~skip 'component $name :~ $(component :: Name) = $body ...'
  | 'method $(fn :: Identifier)($arg,...):
        $body
        ...': [fn, [arg,...]]

  foldfun instance_create_body_def(ls, entity)
  | 'component $name :: $(component :: Name)': 'add_component_helper($entity, $component($name))'
  | 'component optional $name :: $(component :: Name)':
      'if $name
       | add_component_helper($entity, $component($name))
       | #void'
  | 'component $name :~ $(component :: Name) = $(fn :: Name)($body, ...)':
      if syntax_meta.equal_binding(fn, component)
      | 'add_component_helper($entity, $name)'
      | 'add_component_helper($entity, $component($name))'
  | 'component $name :~ $(component :: Name) = $body ...':
      'add_component_helper($entity, $component($name))'
  | ~skip 'method $body ...'

meta:
  fun extract_dot_provider(annot):
     def '$(expansion :: annot_meta.Parsed)': annot
     def values('$pred', '(($key, $data), ...)'): annot_meta.unpack_predicate(expansion)
     def values(statinfo :: List, dot_provider):
       for values(statinfo=[], dot_provider=#false):
         each [key,data]: [[key,data], ...]
         cond
         | to_string(key) == to_string(statinfo_meta.dot_provider_key):
             values(statinfo,data)
         | ~else: values(List.cons([key,data], statinfo), dot_provider)
     values(pred, statinfo.reverse(), dot_provider)

defn.macro
| 'instance $name $opt ...:
     $body ...
     ...':
   def ths:
     match '$opt ...'
     | 'with $ths': ths
     | '': Syntax.make('this').relocate(Syntax.make('$name'))
   def [arg,...]: instance_entity_args(['$body ...',...])
   def [helper,...]: instance_entity_helpers(['$body ...',...])
   def [exports,...]: instance_entity_exports(['$body ...',...])
   def [field,...]: instance_entity_fields(['$body ...',...])
   def [mthd,...]: instance_entity_methods(['$body ...',...], name, [field,...], ths)
   def [[mthd_sym, [mthd_arg,...]],...]: instance_entity_method_args(['$body ...',...])

   def ent: 'ent'
   def [create_body,...]: instance_create_body_def(['$body ...',...], ent)
   def tests: and_all(instance_component_tests(['$body ...', ...], ent))
   '«namespace $name:
       export:
         create
         $exports
         ...

       $helper
       ...

       fun create($arg,...) :: entity.Entity:
         def $ent :~ entity.Entity = entity.create()
         $create_body
         ...
         $ent

     dot.macro
     | 'dot_provider $('$')left $('$')dot $(field)':
         '$(name) . $(field) ($('$')left)'
     | ...
     | 'dot_provider $('$')left $('$')dot $(mthd_sym)':
         'fun ($mthd_arg, ...): $(name) . $(mthd_sym) ($('$')left, $mthd_arg, ...)'
     | ...

     | 'dot_provider $('$')left $('$')dot $('$')right':
         def values(_, _, default_dot_provider):
            extract_dot_provider('entity.Entity')
         '$('$')(statinfo_meta.wrap(left,'(($('$')statinfo_meta.dot_provider_key, $('$')default_dot_provider))')) $('$')dot $('$')right'

     annot.macro '$name':
        def values(pred, [[key,data],$('...')], _):
             extract_dot_provider('entity.Entity')
        annot_meta.pack_predicate(
           'fun ($ent): $('$')pred($ent) && $tests',
           '(($('$') statinfo_meta.dot_provider_key, dot_provider), ($('$')key, $('$')data), $('...'))'
        )
     
     $mthd
     ...
    »'

